const moment = require('moment');

const Tasks = {
	list: function (pool, res, render) {
		pool.getConnection((err, connection) => {
			if (err) {
				console.error(err);
				
				return;
			}
			
			connection.query(
				`SELECT tasks.id, user_id, users.name AS user, priority_id,
				priorities.name AS priority, tasks.create_time, modify_time,
				complete_time, title, text
				FROM tasks
				INNER JOIN users ON tasks.user_id = users.id
				INNER JOIN priorities ON tasks.priority_id = priorities.id
				ORDER BY tasks.id`,
				(err, rows) => {
					if (err) {
						console.error(err);
					} else {
						const formattedRows = rows.map((value) => {
							value.create_time =
								moment(value.create_time).format('YYYY/MM/DD HH:mm:ss');

							if (value.modify_time) {
								value.modify_time =
									moment(value.modify_time).format('YYYY/MM/DD HH:mm:ss');
							}

							if (value.complete_time) {
								value.complete_time =
									moment(value.complete_time).format('YYYY/MM/DD HH:mm:ss');
							}

							return value;
						});
						
						render(res, formattedRows);
					}
					
					connection.release();
				});
			});
		},
	add: function (task, pool, response, result) {
		pool.getConnection((err, connection) => {
			if (err) {
				console.error(err);
				
				return;
			}
			
			delete task.id; // Task id will be generated by SQL server.
			task.create_time = moment().format('YYYY-MM-DD HH:mm:ss');

			connection.query(
				`INSERT INTO tasks SET ?`,
				task,
				(err, rows) => {
					connection.release();

					if (err) {
						result(err, response);
					} else {
						task.id = rows.insertId;
						
						result(null, response, task);
					}
				});
		});
	},
	update: function (task, pool, response, result) {
		pool.getConnection((err, connection) => {
			if (err) {
				console.error(err);
				
				return;
			}
			
			task.modify_time = moment().format('YYYY-MM-DD HH:mm:ss');

			connection.query(
				`UPDATE tasks SET ? WHERE id = ?`,
				[task, task.id],
				(err) => {
					connection.release();

					if (err) {
						result(err, response);
					} else {
						result(null, response, task);
					}
				});
		});
	},
	complete: function (id, pool, response, result) {
		pool.getConnection((err, connection) => {
			if (err) {
				console.error(err);
				
				return;
			}

			const now = moment().format('YYYY-MM-DD HH:mm:ss');

			connection.query(
				`UPDATE tasks SET complete_time = ?
				WHERE id = ? AND complete_time IS NULL`,
				[now, id],
				(err) => {
					connection.release();

					if (err) {
						result(err, response);
					} else {
						result(null, response, now);
					}
				});
		});
	},
	delete: function (id, pool, response, result) {
		pool.getConnection((err, connection) => {
			if (err) {
				console.error(err);

				return;
			}

			connection.query(
				`DELETE FROM tasks WHERE id = ?`,
				id,
				(err) => {
					connection.release();

					if (err) {
						result(err, response);
					} else {
						result(null, response, id);
					}
				});
		});
	}
};

module.exports = Tasks;
